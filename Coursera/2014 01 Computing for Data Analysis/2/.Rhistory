## FALSE
## Your code here
id <- formatC(as.numeric(id), digits = 0, width = 3, flag = "0")
d <- read.csv(file.path(directory, paste(c(id, "csv"), collapse='.')))
if (summarize == TRUE)
{
d
}
else
{
invisible(d)
}
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/getmonitor-test.R")
getmonitor.testscript()
getmonitor(1, "specdata")
getmonitor(101, "specdata", TRUE)
formatC(as.numeric(101), digits = 0, width = 3, flag = "0")
formatC(101, digits = 0, width = 3, flag = "0")
formatC(101, digits = 0, width = 3, flag = "1")
formatC(101, digits = 0, width = 3, flag = "+")
formatC(101, digits = 4, width = 4, flag = "0")
formatC(200         , digits = 4, width = 4, flag = "0")
formatC(200         , digits = 3, width = 4, flag = "0")
formatC(200         , digits = 3, width = 3, flag = "0")
formatC(101         , digits = 3, width = 3, flag = "0")
formatC(1         , digits = 3, width = 3, flag = "0")
formatC(99         , digits = 3, width = 3, flag = "0")
formatC(99         , digits = 3, width = 3, flag = "0")
formatC(as.numeric(1) , digits = 3, width = 3, flag = "0")
formatC(as.numeric(99) , digits = 3, width = 3, flag = "0")
formatC(as.numeric(101) , digits = 3, width = 3, flag = "0")
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
## Your code here
id <- formatC(as.numeric(id), digits = 3, width = 3, flag = "0")
d <- read.csv(file.path(directory, paste(c(id, "csv"), collapse='.')))
if (summarize == TRUE)
{
d
}
else
{
invisible(d)
}
}
source("http://spark-public.s3.amazonaws.com/compdata/scripts/getmonitor-test.R")
getmonitor.testscript()
d1 <- getmonitor(1, "specdata")
head(d1)
d1[1,]
is.na(d1p[1,])
is.na(d1[1,])
aggregate(is.na(d1[1,]), by=Date)
aggregate(is.na(d1[1,]), FUN=mean,  by=Date)
aggregate(is.na(d1[1,]), FUN=mean,  by=d1$Date)
d1$Date
aggregate(is.na(d1[1,]), FUN=mean,  by=d1$Date)
lapply(is.na(d1[1,]), mean)
lapply(d1[1,], mean)
sapply(d1[1,], mean)
is.na.data.frame(d1)
na.omit(d1)
View(`d1`)
length(d1)
length(d1[1,])
length(d1[,1])
length(na.omit(d1)[,1])
length(na.omit(d1)[,1])
directory
list.dirs()
list.dirs(directory)
list.dirs(path=directory)
list.files(directory)
i <- 2
i++
ds
i
i <- i + 1
i
i <- i + 1
i <- i + 1
i <- i + 1
i
f <-  list.files(directory)
f
numeric(length(f))
numeric(length(f)[,1])
f
length(f)
numeric(10, 1)
rbind
d
d <- data.frame(row.names=c("id", "nobs")))
d <- data.frame(row.names=c("id", "nobs"))
d
str(d)
iter <- function(x) +
{}
iter <- function(x) { +
i <- 0
}
iter <- sapply(numeric(10), function(x) x <- X + 1)
iter <- sapply(numeric(10), function(x) { x <- X + 1} )
iter <- sapply(numeric(10), function(x) { x <- x + 1} )
iter(10)
iter
iter <- sapply(numeric(10), function(x) { x= 0; function (y) {x <- x + y}} )
iter
iter()
iter
iter <- sapply(numeric(10), function(x) { x= 0; function (y) {x <- x + y}} )
iter
iter <- function (x) {
aggr = 0
iter1 <- function(x) {
aggr <- aggr + 1
x <- x + aggr
}
}
iter(10)
iter <- function (x) {
aggr = 0
iter1 <- function(x) {
aggr <- aggr + 1
x <- x + aggr
}
x
}
iter(10)
iter <- function (x) {
aggr = 0
iter1 <- function(x) {
aggr <- aggr + 1
x <- x + aggr
}
}
iter(numeric(10))
numerci(10)
numeric(10)
iter <- function (x) {
aggr = 0
iter1 <- function(x) {
aggr <- aggr + 1
x <- x + aggr
}
iter1
}
numeric(10)
iter(numeric(10))
iter <- function (x) {
aggr = 0
iter1 <- function(x) {
aggr <- aggr + 1
x <- x + aggr
x
}
}
iter(numeric(10))
iter
iter <- function (x) {
aggr = 0
iter1 <- function(x) {
aggr <- aggr + 1
x <- x + aggr
}
iter1
}
iter(numeric(10))
iter <- function (x) {
aggr = 0
iter1 <- function(x) {
aggr <- aggr + 1
x <- x + aggr
x
}
iter1
}
iter(numeric(10))
d
cbind(d, c(1:20), c(20:40))
rbind(d, c(1:20), c(20:40))
rbind(d, c(1:20), c(20:40))[1:5,]
rbind(d, c(1:20), c(20:40))[1,]
rbind(d, c(1:20), c(20:40))[,1]
rbind(d, c(1:20), c(20:40))[1,]
rbind(c(1:20), c(20:40))
rbind(c(1:20), c(20:39))
cbind(c(1:20), c(20:39))
cbind(d, c(1:20), c(20:39))
cbind(d, c(1:20))
cbind(d, c(1:20), c(20:39))
cbind(c(1:20), c(20:39))
data.frame(cbind(c(1:20), c(20:39)), row.names=c("D","L"))
data.frame(cbind(c(1:20), c(20:39)), row.names=c("D"))
data.frame(cbind(c(1:20), c(20:39)), row.names=c("D","L","u"))
data.frame(cbind(c(1:20), c(20:39)))
data.frame(cbind(c(1:20), c(20:39)), row.names=c("id", "nobs"))
length(cbind(c(1:20), c(20:39)))
length(cbind(c(1:20))
)
data.frame(cbind(c(1:20), c(20:39)), row.names=c("id"))
data.frame(cbind(c(1:20), c(20:39)), row.names=c("x1"))
data.frame(cbind(c(1:20), c(20:39)))
cbind(c(1:20), c(20:39))
data.frame(c(1:20), c(20:39), c("id", "nobs"))
data.frame(c(1:20), c(20:39), row.names=c("id", "nobs"))
data.frame(c(1:20), c(20:39),check.names=FALSE)
data.frame(c(1:20), c(20:39),check.names=FALSE, row.names=c("id", "nobs"))
data.frame("f"=c(1:20), c(20:39))
data.frame("id"=c(1:20), "nobs" = c(20:39))
id <-  1:332
id
sapply(id, getmonitor, directory)
d <- sapply(id, getmonitor, directory)
head(d)
apply(d, length(na.omit(d)[,1]))
apply(d, function(d) {length(na.omit(d)[,1])})
sapply(d, function(d) {length(na.omit(d)[,1])})
sapply(d, length(na.omit(d)[,1]))
length(na.omit(d[1])[, 1]
)
d[1]
View(d)
apply
d <- lapply(id, getmonitor, directory)
head(d)
id
str(d)
d[1,]
d[1,,]
d[1]
d[2]
d[1:10]
length(na.omit(d)[,1])
length(na.omit(d)[1])
na.omit(d)
na.omit(d[1][,1])
d[1]
d[1][,1]
(d[1])[,1]
(d[1])[1]
(d[[1])[1]
(d[[1]])[1]
d[[1]][1]
d[[1]][,1]
no_na_length <- function(df) {
length(na.omit(df)[,1])
}
no_na_length(d[1])
no_na_length(d[[1])
no_na_length(d[[1]]])
no_na_length(d[[1]])
no_na_length(d[[2]])
sapply(d, no_na_length)
sapply(d,  function(df) length(na.omit(df)[,1])
)
complete <- function(directory, id) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
# length(na.omit(d1)[,1])
d <- lapply(id, getmonitor, directory)
dcomplete <- sapply(d,  function(df) length(na.omit(df)[,1]))
data.frame("id"=id, "nobs"=dcomplete)
}
complete("specdata", 1:10)
complete("specdata", 30:25)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/complete-test.R")
complete.testscript()
?cor
list.files(directory)
length(list.files(directory))
1:length(list.files(directory))
c <- complete(directory, id)
c[1:10]
c
c[1:10,]
c(1,2)
c[c$nobs > 10]
c$nobs > 10
c$nobs > 100
tapply(c, c$nobs > 100, cor)
tapply(c, c$nobs > 100, length)
c
tapply(c$id, c$nobs > 100, str)
len(c)
length(c)
length(c[,1])
rem(d)
rm(d)
rm(f)
rm(id)
rm(xx)
rm(i)
View(data)
View(`d1`)
cordata <- function(directory, id) {
d <- getmonitor(directory, id)
cor(d$sulfate, d$nitrate)
}
cordata("specdata", 1)
cordata <- function(id, directory) {
d <- getmonitor(id, directory)
cor(d$sulfate, d$nitrate)
}
cordata(1, "specdata")
cordata <- function(id, directory) {
d <- na.omit(getmonitor(id, directory))
cor(d$sulfate, d$nitrate)
}
cordata(1, "specdata")
summary(cordata(1, "specdata"))
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id < 1:length(list.files(directory))
c <- complete(directory, id)
tapply(c$id, c$nobs > 100, cordata, directory)
}
cordata <- function(id, directory) {
d <- na.omit(getmonitor(id, directory))
cor(d$sulfate, d$nitrate)
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id < 1:length(list.files(directory))
c <- complete(directory, id)
tapply(c$id, c$nobs > threshold, cordata, directory)
}
cordata <- function(id, directory) {
d <- na.omit(getmonitor(id, directory))
cor(d$sulfate, d$nitrate)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id <- 1:length(list.files(directory))
c <- complete(directory, id)
tapply(c$id, c$nobs > threshold, cordata, directory)
}
cordata <- function(id, directory) {
d <- na.omit(getmonitor(id, directory))
cor(d$sulfate, d$nitrate)
}
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
id
id <- 1:length(list.files(directory)
)
id
c <- complete(directory, id)
c
c$nobs
tapply(c$id, c$nobs)
tapply(c$id, c$nobs > 150)
tapply(c$id, c$nobs > 150, str)
tapply(c$id, c$nobs > 150, c)
c$nobs > 150
list( c$nobs )
length( c$nobs )
length(tapply(c$id, c$nobs > 150, c))
c$id
is.array(c$id)
is.vector(c$id)
length(tapply(c$id, c$nobs > 150))
tapply(c$id, c$nobs > 150, mean)
tapply(c$id, c$nobs > 150, c)
length(tapply(c$id, c$nobs > 150, c))
is.vector(tapply(c$id, c$nobs > 150, c))
str(tapply(c$id, c$nobs > 150, c))
c[c$nobs > 150]
filter(c, c$nobs > 150)
c[:][c$nobs > 150]
c[][c$nobs > 150]
c[c$nobs > 150]
c[(c$nobs > 150),]
lapply(c[(c$nobs > 150),], cordata, directory)
c[(c$nobs > 150),]
c[(c$nobs > 150),1]
is.vector(c[(c$nobs > 150),1])
is.vector(c[(c$nobs > 150),"id"])
(c[(c$nobs > 150),"id"])
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id <- 1:length(list.files(directory))
c <- complete(directory, id)
lapply(c[(c$nobs > 150),"id"], cordata, directory)
}
cordata <- function(id, directory) {
d <- na.omit(getmonitor(id, directory))
cor(d$sulfate, d$nitrate)
}
cr <- corr("specdata", 150)
summary(cr)
c[(c$nobs > 150),"id"]
na.omit(getmonitor(2, directory)
)
d <- na.omit(getmonitor(id, directory))
id
c[(c$nobs > 150),"id"]
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id <- 1:length(list.files(directory))
c <- complete(directory, id)
lapply(c[(c$nobs > 150),"id"], cordata, directory)
}
cordata <- function(index, directory) {
d <- na.omit(getmonitor(index, directory))
cor(d$sulfate, d$nitrate)
}
cr <- corr("specdata", 150)
summary(cr)
c[(c$nobs > threshold),"id"]
threshold <- 150
c[(c$nobs > threshold),"id"]
getmonitor(c[(c$nobs > threshold),"id"][1], directory)
getmonitor(c[(c$nobs > threshold),"id"][1], directory, summarize=TRUE)
filtered <- c[(c$nobs > threshold),"id"]
d <- na.omit(getmonitor(filtered[1], directory))
d
filtered[1]
getmonitor(filtered[1], directory)
d
d[1,]
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id <- 1:length(list.files(directory))
c <- complete(directory, id)
filtered <- c[(c$nobs > threshold),"id"]
lapply(filtered, cordata, directory)
}
cordata <- function(index, directory) {
d <- na.omit(getmonitor(index, directory))
cor(d$sulfate, d$nitrate)
}
cr <- corr("specdata", 150)
summary(cr)
cr[1]
summary(cr[1])
summary(cr[[1])
summary(cr[[1]])
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id <- 1:length(list.files(directory))
c <- complete(directory, id)
filtered <- c[(c$nobs > threshold),"id"]
sapply(filtered, cordata, directory)
}
cr <- corr("specdata", 150)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
